% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RestructureAlleleFreq.R
\name{RestructureAlleleFreq}
\alias{RestructureAlleleFreq}
\title{Restructure Allele Frequency Data}
\usage{
RestructureAlleleFreq(data, Loc = 1)
}
\arguments{
\item{data}{A data frame containing population data and allele frequencies. The structure of the data frame depends on the value of the \code{Loc} parameter.}

\item{Loc}{An integer indicating the format of the data:
1: The data frame should have columns "Pop", "Freq_A", and "Freq_a" for allele frequencies.
2: The data frame should have columns "Pop", "AB", "Ab", "aB", and "ab" for genotype frequencies. Default is 1.}
}
\value{
A data frame in long format with three columns: \code{Population}, \code{Allele}, and \code{Frequency}.
The function returns a long-format data frame where each row represents an allele and its corresponding frequency in a population.
}
\description{
This function restructures allele frequency data into a long format. It accepts data in two formats, specified by the \code{Loc} parameter.
In \code{Loc = 1}, the input data should have columns for the frequencies of two alleles (Freq_A and Freq_a). In \code{Loc = 2}, the data
should include columns for the frequencies of four genotypes (AB, Ab, aB, ab).
}
\examples{
# Example 1 for Loc = 1
df1 <- data.frame(
  Pop = c("Pop1", "Pop2", "Pop3", "Pop4", "Pop5", "Pop6"),
  Freq_A = c(0.6, 0.7, 0.5, 0.8, 0.4, 0.3),
  Freq_a = c(0.4, 0.3, 0.5, 0.2, 0.6, 0.7))

allele_data_1 <- RestructureAlleleFreq(df1, Loc = 1)

# Example 2 for Loc = 2
df2 <- data.frame(
  Pop = c("Pop1", "Pop2", "Pop3", "Pop4", "Pop5", "Pop6"),
  AB = c(0.2, 0.3, 0.1, 0.25, 0.4, 0.35),
  Ab = c(0.3, 0.4, 0.2, 0.15, 0.25, 0.3),
  aB = c(0.4, 0.2, 0.3, 0.45, 0.2, 0.25),
  ab = c(0.1, 0.1, 0.4, 0.15, 0.15, 0.1))

allele_data_2 <- RestructureAlleleFreq(df2, Loc = 2)
}
